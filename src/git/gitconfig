[user]
    name = Rodolphe Stoclin
    email = srodolphe@gmail.com
    signingkey = 37C817DE4492623E

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]
    editor = code --wait

    # Use custom `.gitignore`
    excludesfile = ~/.gitignore

    autocrlf = input
    safecrlf = warn

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

    pager = diff-so-fancy | less --tabs=4 -RFX

[color]
    ui = true

[color "diff"]
    meta = yellow
    frag = magenta bold
    old = red bold
    new = green bold
   	commit = yellow bold
    whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[commit]
    # https://help.github.com/articles/signing-commits-using-gpg/
    gpgsign = true

[alias]
    ll = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat --date=relative

    ls = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    today = log --since=1am --author='Rodolphe Stoclin' --format='- %s'

    filelog = log -u

    d = diff

    grep = grep -n

    la = "!git config -l | grep alias | cut -c 7-"

    st = status -sb

    s = status -sb

    lpush = "!git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit origin/$(git currentbranch)..HEAD"

    lpull = "!git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit HEAD..origin/$(git currentbranch)"

    whatsnew = "!git diff origin/$(git currentbranch)...HEAD"

    whatscoming = "!git diff HEAD...origin/$(git currentbranch)"

    currentbranch = "!git branch | grep \"^\\*\" | cut -d \" \" -f 2"

    w = whatchanged --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    undo = reset --soft HEAD^

    count = shortlog -sn

    pullr = pull --rebase

    reb = "!r() { git rebase -i HEAD~$1; }; r"

    dm = "!git branch --merged | grep -v '\\*'"

    empty = "!git commit --allow-empty -m 'chore(deploy): trigger build with empty commit'"

    pr = "!f() { git fetch -fu ${2:-upstream} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"

    pr-clean = "!git checkout master ; git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

    up = pull --rebase --autostash

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[rerere]
    enabled = true

[push]
    default = current
    followTags = true

[pull]
    default = current

[filter "lfs"]
    smudge = git-lfs smudge -- %f
    required = true
    clean = git-lfs clean -- %f
    process = git-lfs filter-process

[git-up "rebase"]
    auto = false

[mergetool "Code"]
    cmd = code --wait $MERGED
    trustexitcode = true

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    tool = Code

[difftool "Code"]
    cmd = code --wait --diff $LOCAL $REMOTE

[diff]
    # Detect copies as well as renames
    renames = copies
    # external = git-external-patdiff
    tool = Code
